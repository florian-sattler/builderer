{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"builderer      <p> Container based mono repo builder </p> <p> </p>"},{"location":"#but-why","title":"But why?","text":"<p>builderer let's you build your container stack the same way your build pipeline does so you won't get any surprises!</p> <p>Quote by the author</p> <p>Do you need more than a builder? Try builderer!</p> <p>builderer makes it easy to build images both on CI/CD platforms as well as your local machine using the same configuration and build command. (Running builder requires python and either docker or podman)</p> <p>Tip</p> <p>builderer let's you have only one build config for local and remote builds! Use the cli for tweaking different environments.</p>"},{"location":"#quickstart","title":"Quickstart","text":"<p>Create <code>.builderer.yml</code> a the root of your project:</p> <pre><code>parameters:\nregistry: registry.example.com\n\nsteps:\n- type: build_images\ndirectories:\n- database\n- frontend\n- backend\n</code></pre> <p>Run the configuration locally to check for potential issues.</p> <pre><code>$ builderer --no-push\nBuilding image: database\nBuilding image: frontend\nBuilding image: backend\n</code></pre> <p>Now add builderer to your delivery pipeline and get a running build!</p> <pre><code>$ builderer\nBuilding image: database\nBuilding image: frontend\nBuilding image: backend\nPushing image: backend\nPushing image: frontend\nPushing image: database\n</code></pre> <p>Further configuration can be supplied via command line or in <code>.builderer.yml</code>.</p> <p>Tip</p> <p>Take a look at <code>builderer --help</code> to learn more or follow this documentation.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>"},{"location":"changes/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changes/#unreleased","title":"Unreleased","text":""},{"location":"changes/#v200-2023-07-11","title":"v2.0.0 - 2023-07-11","text":""},{"location":"changes/#added","title":"Added","text":"<ul> <li>Added step to forward multiple images.</li> <li>Use pre-commit to improve developer experience.</li> <li> <p>Implemented parallel execution of actions.   This breaks backwards compatibility with <code>1.X</code> versions when used as a library.   Config files are still compatible with the new execution engine, however some steps are now being executed in parallel:</p> <ul> <li><code>BuildImages</code></li> <li><code>ForwardImages</code></li> <li><code>PullImage</code></li> </ul> <p>Furthermore the <code>Group</code> step was added to allow custom parallel execution. Take a look at the documentation to learn more!</p> </li> </ul>"},{"location":"changes/#fixed","title":"Fixed","text":"<ul> <li>Recompiled <code>requirements.txt</code>.</li> </ul>"},{"location":"changes/#v110-2023-02-28","title":"v1.1.0 - 2023-02-28","text":""},{"location":"changes/#added_1","title":"Added","text":"<ul> <li>Allow specifying additional tags when building or forwarding an image on a per step basis.</li> </ul>"},{"location":"changes/#changed","title":"Changed","text":"<ul> <li><code>extract_from_image</code> now requires full image names allowing extraction from remote images.</li> <li>Documentation will now only be published for new releases.</li> </ul>"},{"location":"changes/#fixed_1","title":"Fixed","text":"<ul> <li>Documentation Typos</li> </ul>"},{"location":"changes/#v100-2023-02-23","title":"v1.0.0 - 2023-02-23","text":""},{"location":"changes/#added_2","title":"Added","text":"<ul> <li>Added publishing documentation.</li> <li>Added missing tests to push coverage to 100%. New code will need to be tested from now on.</li> <li>Require at least python 3.10</li> <li>Linting for PRs using github actions</li> <li>Automatically update documentation via gh actions.</li> <li>Extended Documentation</li> </ul>"},{"location":"changes/#changed_1","title":"Changed","text":"<ul> <li>Configuration for black and flake8.</li> <li>Call <code>Builderer</code> methods using keyword arguments from file config when ever possible.</li> <li>Updated dependencies and merged into single <code>requirements.txt</code></li> </ul>"},{"location":"changes/#removed","title":"Removed","text":"<ul> <li>Deleted Python 3.9 package classifier.</li> </ul>"},{"location":"changes/#fixed_2","title":"Fixed","text":"<ul> <li><code>dockerfile</code> argument was not honored when specified in file config.</li> </ul>"},{"location":"changes/#v041-2023-02-18","title":"v0.4.1 - 2023-02-18","text":""},{"location":"changes/#added_3","title":"Added","text":"<ul> <li>Option to specify which Dockerfile to use for <code>build_image</code> and <code>BuildImage</code>.</li> <li>Added usage documentation.</li> <li>Publish builderer to PyPI via github actions.</li> </ul>"},{"location":"changes/#fixed_3","title":"Fixed","text":"<ul> <li>Up to date CLI docs</li> <li>Load license shields from pipy to reduce github token load</li> </ul>"},{"location":"changes/#v040-2023-02-13","title":"v0.4.0 - 2023-02-13","text":""},{"location":"changes/#added_4","title":"Added","text":"<ul> <li>Development requirements pinned using pip compile</li> <li>Extended documentation configuration<ul> <li>added navigation to footer</li> <li>added copyright notice to footer</li> <li>added social links to footer</li> <li>instant page loading</li> <li>moved page table of contents (right) into main navigation (left)</li> <li>added scroll to top button</li> </ul> </li> <li>Added editor integration for <code>.builderer.yml</code></li> <li>Added links for each release showing what changed using github's compare function.</li> <li>Improved config validation and error display</li> <li>Added docstrings in <code>builderer.builderer.Builderer</code></li> <li>Added mkdocstrings to generated references.</li> <li>Added Documentation for json / yaml schema</li> <li>Extended CLI documentation:</li> <li>Documented usage as library</li> </ul>"},{"location":"changes/#changed_2","title":"Changed","text":"<ul> <li>Renamed <code>BuildConfig</code> to builderer config for clarity and editor integration.</li> <li>Reworked shields in documentation and README.md</li> </ul>"},{"location":"changes/#fixed_4","title":"Fixed","text":"<ul> <li>PyPI project urls</li> <li>Fixed broken nested lists with two spaces using mdx_truly_sane_lists see this issue</li> </ul>"},{"location":"changes/#v030-2023-02-10","title":"v0.3.0 - 2023-02-10","text":""},{"location":"changes/#added_5","title":"Added","text":"<ul> <li>Added example workspace containing a docker compose project with frontend backend and database</li> <li>Added tests using pytest</li> <li>Added online documentation using MkDocs and Material for MkDocs</li> <li>Additional URLs on PyPI to documentation, changelog, code and issue tracker</li> </ul>"},{"location":"changes/#changed_3","title":"Changed","text":"<ul> <li>Moved from pydanctic argparse to pythons argparse</li> </ul>"},{"location":"changes/#removed_1","title":"Removed","text":"<ul> <li>Removed <code>name</code> from build config</li> </ul>"},{"location":"changes/#v020-2023-02-08","title":"v0.2.0 - 2023-02-08","text":""},{"location":"changes/#added_6","title":"Added","text":"<ul> <li>Added command line interface with config files using Pydantic and Pydantic Argparse</li> <li>Updated README.md to reflect changes</li> <li>pin requirements and their dependencies using pip compile</li> <li>Added link to this changelog in README.md</li> <li>Initial PyPI release</li> <li>Improved package metadata</li> </ul>"},{"location":"changes/#changed_4","title":"Changed","text":"<ul> <li>The <code>Builderer</code> object can now be imported directly from the package.</li> </ul>"},{"location":"changes/#v010-2023-02-07","title":"v0.1.0 - 2023-02-07","text":""},{"location":"changes/#added_7","title":"Added","text":"<ul> <li>README</li> <li>LICENSE</li> <li>.gitignore</li> <li>Builderer-Package with PEP 518 Metadata</li> <li>Changelog</li> <li>Use bump2version</li> </ul>"},{"location":"cli/","title":"Command Line Interface","text":"<p>builderer is primarily intended to be invoked via command line. Using it programmatically inside another program is possible via the library interface.</p>"},{"location":"cli/#overview","title":"Overview","text":"<p>A short description of all the command line argument may be printed printed using <code>--help</code> as argument.</p> <pre><code>$ builderer --help\nusage: builderer [-h] [--registry REGISTRY] [--prefix PREFIX]\n                 [--tags TAGS [TAGS ...]] [--no-push] [--cache] [--verbose]\n                 [--simulate] [--backend {docker,podman}]\n                 [--max-parallel MAX_PARALLEL] [--config CONFIG] [--version]\n\nBuilding and pushing containers. Command line arguments take precedence over\nfile configuration which in turn takes precedence over default values\n\noptions:\n  -h, --help            show this help message and exit\n  --registry REGISTRY   Set the registry url. You may include a port using the\n                        colon notation (example.com:3000/). This is needed\n                        when using a non standard port. Unset by default.\n  --prefix PREFIX       Set the directory for all images. This is the image\n                        component between registry url and image name. For\n                        example on docker hub this is used for the username.\n                        Unset by default.\n  --tags TAGS [TAGS ...]\n                        One or multiple tags to use for each image. Defaults\n                        to ['latest']\n  --no-push             Path to builderer yaml configuration file. Defaults to\n                        '.builderer.yml'\n  --cache               Whether to allow using cached images. This is\n                        especially usefull for local builds.\n  --verbose             Show issued commands and their live output.\n  --simulate            Prevent issuing any commands just do the printing.\n  --backend {docker,podman}\n                        Overwrite the backend used to build, tag and pull\n                        images. Defaults to 'docker'\n  --max-parallel MAX_PARALLEL\n                        Limit the maximum number of parallel jobs per step. By\n                        default the num_parallel argument of each individual\n                        step is used.\n  --config CONFIG       Path to builderer yaml configuration file. Defaults to\n                        '.builderer.yml'\n  --version             show program's version number and exit\n\nThis program is intended to run locally as well as inside ci/cd jobs.\n</code></pre>"},{"location":"cli/#details","title":"Details","text":"<p>Detailed descriptions for all commands are shown below.</p> <p>Info</p> <p>Command line arguments take precedence over file configuration which in turn takes precedence over default values.</p>"},{"location":"cli/#-h-help","title":"<code>-h</code> <code>--help</code>","text":"<p>Show the help message and exit with return code <code>0</code>.</p>"},{"location":"cli/#-registry-url","title":"<code>--registry</code> <code>url</code>","text":"<p>Set the registry url including a port if a non standard port is used.</p> <p>Default: <code>''</code> (empty string)</p> Example <pre><code>builderer --registry registry.example.com:3000\n</code></pre> <p>Warning</p> <p>An empty registry will lead to errors when pushing. Make sure to pass <code>--no-push</code> if needed.</p>"},{"location":"cli/#-prefix-prefix","title":"<code>--prefix</code> <code>prefix</code>","text":"<p>Set the folder for all images. This is the image component between registry url and image name. For example on docker hub this is used for the username.</p> <p>Default: <code>''</code> (empty string)</p> Example <pre><code>builderer --prefix foo\n</code></pre> <p>This will result in images tagged <code>&lt;registry-url&gt;/foo/&lt;image-name&gt;:&lt;image-tag&gt;</code></p>"},{"location":"cli/#-tags-tags","title":"<code>--tags</code> <code>tags ...</code>","text":"<p>One or multiple tags to use for each image. Multiple tags get separated as args. (i.e. by spaces in a shell environment)</p> <p>Default: <code>latest</code></p> Example <pre><code>builderer --tags foo bar baz\n</code></pre> <p>Tip</p> <p>This is a great place to use environment variables or other shell variables such as build id or the current date.</p> <p><code>builderer --tags \"$(date --iso-8601)\" \"$BUILD_BUILDID\" latest</code></p>"},{"location":"cli/#-no-push","title":"<code>--no-push</code>","text":"<p>Prevent pushing images in all steps.</p>"},{"location":"cli/#-cache","title":"<code>--cache</code>","text":"<p>Allow using cached images. This is especially usefull for local builds.</p>"},{"location":"cli/#-verbose","title":"<code>--verbose</code>","text":"<p>Show issued commands and their output.</p> <p>Info</p> <p>If an build error occurs and <code>--verbose</code> was not passed, the full output of the failed command will still be printed to standard out.</p>"},{"location":"cli/#-simulate","title":"<code>--simulate</code>","text":"<p>Prevent issuing any commands just do the printing.</p> <p>Tip</p> <p>Using <code>--simulate</code> alongside <code>--verbose</code> might be usefull for debugging.</p>"},{"location":"cli/#-backend-docker-or-podman","title":"<code>--backend</code> <code>docker</code> or <code>podman</code>","text":"<p>Overwrite the backend used to build, tag and pull images.</p> <p>Default: <code>docker</code></p> Example <pre><code>builderer --backend podman\n</code></pre>"},{"location":"cli/#-max-parallel-max_parallel","title":"<code>--max-parallel</code> <code>max_parallel</code>","text":"<p>Limit the maximum number of parallel jobs per step. By default the num_parallel argument of each individual step is used.</p> <p>Default: No limit</p> Example <pre><code>builderer --max-parallel 1\n</code></pre>"},{"location":"cli/#-config-pathtoconfigyml","title":"<code>--config</code> <code>path/to/config.yml</code>","text":"<p>Path to builderer config.</p> <p>Default: <code>.builderer.yml</code></p> Example <pre><code>builderer --config ./other-config.yaml\n</code></pre>"},{"location":"cli/#-version","title":"<code>--version</code>","text":"<p>Show version number and exit with return code <code>0</code>.</p>"},{"location":"editor-integration/","title":"Editor integration","text":"<p>In order to minimize friction and maximize productivity, builderer provides its own schema.json for <code>.builderer.yml</code>. If your editor supports YAML schema validation, it's definitely recommended to set it up.</p>"},{"location":"editor-integration/#visual-studio-code","title":"Visual Studio Code","text":"<ol> <li>Install <code>vscode-yaml</code> for YAML language support.</li> <li>Add the schema under the <code>yaml.schemas</code> key in your user or     workspace <code>settings.json</code>:<pre><code>{\n\"yaml.schemas\": {\n\"https://builderer.florian-sattler.de/schema.json\": \".builderer.yml\"\n}\n}\n</code></pre> </li> </ol>"},{"location":"editor-integration/#other","title":"Other","text":"<ol> <li>Ensure your editor of choice has support for YAML schema validation.</li> <li>Link the schema present at <code>https://builderer.florian-sattler.de/schema.json</code> to files named <code>.builderer.yml</code> or manually select the schema.</li> </ol>"},{"location":"library/","title":"Usage as library","text":"<p>Builderer can easily be used without configuration files.</p>"},{"location":"library/#example","title":"Example","text":"<p>The following example pipeline</p> <pre><code>from builderer import Builderer, ActionFactory\n\nf = ActionFactory(registry=\"registry.example.com\", prefix=\"project/name\")\nb = Builderer(simulate=True)\n\nb.add_action_likes(*f.build_image(\"frontend\"))\nb.add_action_likes(*f.build_image(\"backend\"))\nb.add_action_likes(*f.build_image(\"database\"))\n\nb.run()\n</code></pre> <p>will print</p> <pre><code>Building image: frontend\nBuilding image: backend\nBuilding image: database\nPushing image: database\nPushing image: backend\nPushing image: frontend\n</code></pre> <p>Note that because <code>simulate=True</code> was passed, no commands got issued.</p> <p>Hint</p> <p>Pass <code>verbose=true</code> to see which commands would have been issued.</p>"},{"location":"library/#reference","title":"Reference","text":""},{"location":"library/#builderer.actions","title":"<code>builderer.actions</code>","text":"<p>Builderers file config is a thin wrapper around this module as well as the builderer module.</p>"},{"location":"library/#builderer.actions.Action","title":"<code>Action</code>  <code>dataclass</code>","text":"<p>A named sequence of commands.</p>"},{"location":"library/#builderer.actions.ActionFactory","title":"<code>ActionFactory</code>","text":"<p>The ActionFactory class is used to create build tasks.</p>"},{"location":"library/#builderer.actions.ActionFactory.__init__","title":"<code>__init__(*, registry=None, prefix=None, push=True, cache=False, tags=['latest'], backend='docker')</code>","text":"<p>Create predefined or custom actions.</p> <p>Parameters:</p> Name Type Description Default <code>registry</code> <code>str | None</code> <p>Registry URL. Defaults to None.</p> <code>None</code> <code>prefix</code> <code>str | None</code> <p>Registry folder / namespace / user. Defaults to None.</p> <code>None</code> <code>push</code> <code>bool</code> <p>Whether to allow pushing images. Defaults to True.</p> <code>True</code> <code>cache</code> <code>bool</code> <p>Allow using cached images. Defaults to False.</p> <code>False</code> <code>tags</code> <code>list[str]</code> <p>Tags to use. Defaults to [\"latest\"].</p> <code>['latest']</code> <code>backend</code> <code>typing.Literal['docker', 'podman']</code> <p>Overwrite backend to use. Defaults to \"docker\".</p> <code>'docker'</code>"},{"location":"library/#builderer.actions.ActionFactory.action","title":"<code>action(name, commands)</code>","text":"<p>Create a generic action with multiple commands.</p> <p>Hint: Use this mechanism if other commands aren't sufficient for your usecase.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the action</p> required <code>commands</code> <code>list[list[str]]</code> <p>List of commands. Each command is a list of strings: the executable followed by arguments.</p> required"},{"location":"library/#builderer.actions.ActionFactory.build_image","title":"<code>build_image(directory, *, dockerfile=None, name=None, push=True, qualified=True, extra_tags=None)</code>","text":"<p>Build a docker image and push it to the registry.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>str</code> <p>Directory containing the build context.</p> required <code>dockerfile</code> <code>str | None</code> <p>Path to Dockerfile. Name of the resulting image. Defaults to /Dockerfile. <code>None</code> <code>name</code> <code>str | None</code> <p>Name of the resulting image. Defaults to the name of the Dockerfiles parent directory.</p> <code>None</code> <code>push</code> <code>bool</code> <p>Whether to push the image. Defaults to True.</p> <code>True</code> <code>qualified</code> <code>bool</code> <p>Whether to add the registry path and prefix to the image name. Defaults to True.</p> <code>True</code> <code>extra_tags</code> <code>list[str] | None</code> <p>additional tags to use for this image. Defaults to None.</p> <code>None</code>"},{"location":"library/#builderer.actions.ActionFactory.extract_from_image","title":"<code>extract_from_image(image, path, *dest)</code>","text":"<p>Copy a file from within a docker image.</p> <p>Parameters:</p> Name Type Description Default <code>image</code> <code>str</code> <p>Name of the image to copy from.</p> required <code>path</code> <code>str</code> <p>Source path inside the image.</p> required <code>dest</code> <code>str</code> <p>Destination paths. The file will be copied to all destinations individually.</p> <code>()</code>"},{"location":"library/#builderer.actions.ActionFactory.forward_image","title":"<code>forward_image(name, *, new_name=None, extra_tags=None)</code>","text":"<p>Pull an image from a registry, retag it and push it using the new names.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>image name to pull</p> required <code>new_name</code> <code>str | None</code> <p>Set a new name for the image. By default the basename of the pulled image without the tag is used. Defaults to None.</p> <code>None</code> <code>extra_tags</code> <code>list[str] | None</code> <p>additional tags to use for this image. Defaults to None.</p> <code>None</code>"},{"location":"library/#builderer.actions.ActionFactory.pull_image","title":"<code>pull_image(name)</code>","text":"<p>Pull an image from a registry. This might be usefull to ensure a local image is up to date (e.g. for local builds).</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>image name to pull.</p> required"},{"location":"library/#builderer.actions.ActionGroup","title":"<code>ActionGroup</code>  <code>dataclass</code>","text":"<p>A sequence of actions with many or may not be run in parallel.</p>"},{"location":"library/#builderer.builderer","title":"<code>builderer.builderer</code>","text":"<p>Builderers file config is a thin wrapper around this module as well as the action module.</p>"},{"location":"library/#builderer.builderer.Builderer","title":"<code>Builderer</code>","text":"<p>The Builderer class is used to issue collected actions.</p>"},{"location":"library/#builderer.builderer.Builderer.__init__","title":"<code>__init__(*, verbose=False, simulate=False, max_parallel=None)</code>","text":"<p>Run commands inside in two queues. A action queue and a post queue.</p> <p>First the main actions gets handled (FIFO) then the corresponding post actions get called in reversed order (LIFO)</p> Example <p>Building is done first, pushing is done as a post steps. This means a build is only pushed if all other main actions have been successful.</p> <p>Parameters:</p> Name Type Description Default <code>verbose</code> <code>bool</code> <p>Verbose output. Defaults to False.</p> <code>False</code> <code>simulate</code> <code>bool</code> <p>Prevent issuing commands. Defaults to False.</p> <code>False</code> <code>max_parallel</code> <code>int</code> <p>Limit the maximum number of parallel jobs per step. By default the num_parallel argument of each individual step is used.</p> <code>None</code>"},{"location":"library/#builderer.builderer.Builderer.add_action_likes","title":"<code>add_action_likes(main, post)</code>","text":"<p>Add two Actions / ActionGroups to the main and the postprocessing queues.</p> <p>If None is passed for an argument it will be ignored.</p> <p>Parameters:</p> Name Type Description Default <code>main</code> <code>Action | ActionGroup | None</code> <p>A Action / ActionGroup to add to the main queue</p> required <code>post</code> <code>Action | ActionGroup | None</code> <p>A Action / ActionGroup to add to the postprocessing queue</p> required"},{"location":"library/#builderer.builderer.Builderer.run","title":"<code>run()</code>","text":"<p>Run queue actions and action groups. Stops when done or a command fails.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>return code. On success this will be zero. Otherwise it will be the return code of the failed command.</p>"},{"location":"library/#builderer.builderer.Builderer.run_action","title":"<code>run_action(action)</code>","text":"<p>Run a single Action.</p> <p>The sequentialls runs each command of the given action. Stops if an error occurs and returns failed return code and command output. Output is only captured if not running verbosely.</p> <p>Does nothing if self.simulate is True and returns (0, b\"\").</p> <p>Parameters:</p> Name Type Description Default <code>action</code> <code>Action</code> <p>Action to run.</p> required <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>if any executable was not found.</p> <p>Returns:</p> Type Description <code>tuple[int, bytes]</code> <p>tuple[int, bytes]: status code and command output if an error occurred otherwise b\"\".</p>"},{"location":"library/#builderer.builderer.Builderer.run_action_group","title":"<code>run_action_group(group)</code>","text":"<p>Run an action group.</p> <p>Contained actions get started sequentially, they might however run in parallel as specified in the group and capped by self.max_parallel. Any exception encountered as well as any failed command will stop executing new actions and wait for all running actions to complete.</p> <p>Any encountered error is returned alongside the corresponding code.</p> <p>Parameters:</p> Name Type Description Default <code>group</code> <code>ActionGroup</code> <p>group to run.</p> required <p>Returns:</p> Type Description <code>tuple[int, bytes]</code> <p>tuple[int, bytes]: status code and command output if an error occurred otherwise b\"\".</p>"},{"location":"library/#builderer.builderer.Builderer.run_cmd","title":"<code>run_cmd(command)</code>","text":"<p>Run a single command.</p> <p>Output is only captured and returned if not running verbosely.</p> <p>Does nothing if self.simulate is True and returns (0, b\"\").</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>list[str]</code> <p>Command to run.</p> required <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>if the executable was not found.</p> <p>Returns:</p> Type Description <code>tuple[int, bytes]</code> <p>tuple[int, bytes]: status code and command output if captured otherwise b\"\".</p>"},{"location":"usage/","title":"Usage","text":"<p>This document shows how to use a <code>.builderer.yml</code> file to configure your build.</p> <p>Using the <code>builderer</code> python library is documented here.</p> <p>Note</p> <p>builderer works great on projects containing multiple folder which need to be build, each nested below a common root directory.</p> <pre><code>example_workspace\n\u251c\u2500\u2500 backend\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Dockerfile\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 frontend\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 docker-compose.yml\n\u2514\u2500\u2500 .builderer.yml\n</code></pre> <p>To get builderer up and running create a <code>.builderer.yml</code> file at the root of your project containing at least the following:</p> <pre><code>steps: []\n</code></pre> <p>Now look below on how to fill the steps and how update default parameters. When you are happy run</p> <pre><code>builderer\n</code></pre> <p>calling the command line interface to run your build.</p>"},{"location":"usage/#buildererconfig","title":"BuildererConfig","text":"<p>This defines the config file, typically called <code>.builderer.yml</code>.</p> Property Type Required Description parameters object No Overwrite default parameters. Values set here will in turn be overwritten by command line arguments. steps array Yes List of steps to execute. Example <pre><code>parameters:\nregistry: registry.example.com\nprefix: foo\n\nsteps:\n- type: pull_images\nnames:\n- docker.io/python:alpine\n- docker.io/nginx:alpine\n\n- type: forward_image\nname: docker.io/redis:alpine\n\n- type: build_images\ndirectories:\n- frontend\n- backend\n</code></pre>"},{"location":"usage/#parameters","title":"Parameters","text":"Property Type Required Description registry string No Set the registry url. You may include a port using the colon notation (example.com:3000/). This is needed when using a non standard port. Unset by default. prefix string No Set the directory for all images. This is the image component between registry url and image name. For example on docker hub this is used for the username. push boolean No Whether to allow pushing images. cache boolean No Whether to allow using cached images. This is especially usefull for local builds. verbose boolean No Show issued commands and their live output. tags array of string No One or multiple tags to use for each image. Defaults to ['latest'] simulate boolean No Prevent issuing any commands just do the printing. backend \"docker\" or \"podman\" No Overwrite the backend used to build, tag and pull images. Defaults to 'docker' max_parallel integer No Limit the maximum number of parallel jobs per step. By default the num_parallel argument of each individual step is used. Example <pre><code>parameters:\nregistry: my-registry.example.com\nprefix: username\npush: false\ncache: true\nverbose: true\ntags:\n- custom\n- latest\nsimulate: true\nbackend: podman\nmax_parallel: 1\n</code></pre>"},{"location":"usage/#steps","title":"Steps","text":"<p>Each step may be one of</p> <ul> <li>Action</li> <li>BuildImage</li> <li>BuildImages</li> <li>ExtractFromImage</li> <li>ForwardImage</li> <li>ForwardImages</li> <li>Group</li> <li>PullImage</li> <li>PullImages</li> </ul> Example <pre><code>steps:\n- type: build_image\ndirectory: frontend\n</code></pre>"},{"location":"usage/#action","title":"Action","text":"<p>Hint</p> <p>Use this mechanism if other steps aren't sufficient for your usecase.</p> Property Type Required Description type \"action\" Yes Type of the step name string Yes Name printed before running the action commands array of array of string Yes List of commands. Each command is a list of strings: the executable followed by arguments. post boolean Yes Whether to add the action to the post queue Example <pre><code>steps:\n- type: action\nname: my custom action\ncommands:\n- [\"echo\", \"first\", \"step\"]\n- [\"/usr/bin/python3\", \"-c\", \"print('hello world')\"]\npost: false\n</code></pre>"},{"location":"usage/#buildimage","title":"BuildImage","text":"Property Type Required Description type \"build_image\" Yes Type of the step directory string Yes Directory containing the Dockerfile. This is also used as the build context. dockerfile string No Path to Dockerfile. Name of the resulting image. Defaults to <code>&lt;directory&gt;/Dockerfile</code>. name string No Name of the resulting image. Defaults to the name of the Dockerfiles parent directory. push boolean No Whether to push the image. Defaults to True. qualified boolean No Whether to add the registry path and prefix to the image name. Defaults to True. extra_tags array of string No Additional tags to use in this step. Defaults to None. Example <pre><code>steps:\n- type: build_image\ndirectory: frontend\n</code></pre>"},{"location":"usage/#buildimages","title":"BuildImages","text":"Property Type Required Description type \"build_images\" Yes Type of the step directories array of string Yes Directories containing each containing Dockerfile. push boolean No Whether to push the image. Defaults to True. qualified boolean No Whether to add the registry path and prefix to the image name. Defaults to True. extra_tags array of string No Additional tags to use in this step. Defaults to None. num_parallel integer No Number of parallel executions. Defaults to 1 Example <pre><code>steps:\n- type: build_images\ndirectories:\n- frontend\n- backend\n</code></pre>"},{"location":"usage/#extractfromimage","title":"ExtractFromImage","text":"Property Type Required Description type \"extract_from_image\" Yes Type of the step image string Yes Name of the image to copy from. path string Yes Source path inside the image. dest array of string Yes Destination paths. The file will be copied to all destinations individually. Example <pre><code>steps:\n- type: extract_from_image\nimage: \"registry.example.com:5000/some/image:latest\"\npath: /etc/config.json\ndest:\n- frontend/\n- backend/docs/\n</code></pre>"},{"location":"usage/#forwardimage","title":"ForwardImage","text":"Property Type Required Description type \"forward_image\" Yes Type of the step name string Yes Image name to forward. new_name string No Set a new name for the image. By default the basename of the pulled image without the tag is used. extra_tags array of string No Additional tags to use in this step. Defaults to None. Example <pre><code>steps:\n- type: forward_image\nname: \"registry.example.com:5000/some/image:latest\"\n</code></pre>"},{"location":"usage/#forwardimages","title":"ForwardImages","text":"Property Type Required Description type \"forward_images\" Yes Type of the step names array of string Yes Image names to forward. extra_tags array of string No Additional tags to use in this step. Defaults to None. num_parallel integer No Number of parallel executions. Defaults to 4 Example <pre><code>steps:\n- type: forward_images\nnames:\n- \"registry.example.com:5000/some/image:latest\"\n- \"registry2.example.org:5555/another/image:stable\"\n</code></pre>"},{"location":"usage/#group","title":"Group","text":"Property Type Required Description type \"group\" Yes Type of the step num_parallel integer Yes Number of parallel executions. steps array Yes List of steps to execute. <p>Valid steps are:</p> <ul> <li>Action</li> <li>BuildImage</li> <li>ExtractFromImage</li> <li>ForwardImage</li> <li>PullImage</li> </ul> Example <pre><code>steps:\n- type: group\nnum_parallel: 2\nsteps:\n- type: pull_image\nname: \"registry2.example.org:5555/another/image:stable\"\n- type: forward_image\nname: \"registry.example.com:5000/some/image:latest\"\n</code></pre>"},{"location":"usage/#pullimage","title":"PullImage","text":"Property Type Required Description type \"pull_image\" Yes Type of the step name string Yes Image name to pull. Example <pre><code>steps:\n- type: pull_image\nname: \"registry.example.com:5000/some/image:latest\"\n</code></pre>"},{"location":"usage/#pullimages","title":"PullImages","text":"Property Type Required Description type \"pull_images\" Yes Type of the step names array of string Yes Image names to pull. num_parallel integer No Number of parallel executions. Defaults to 4 Example <pre><code>steps:\n- type: pull_images\nnames:\n- \"registry.example.com:5000/some/image:latest\"\n- \"docker.io/nginx:alpine\"\n</code></pre>"}]}